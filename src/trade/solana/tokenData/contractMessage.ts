// IN SOL

export const contractMessage = async (
  name: string = "Unknown", // âœ…
  symbol: string = "Unknown", // âœ…
  tokenAddress: string = "Unknown", // âœ…
  // imageURL
  lPPairAddress: string = "Unknown", // âœ…
  dex: string = "Unknown" /**  dex that would be traded  + âœ… */,
  priceInUsd: number = 0, // of the token priceInSol*âœ…
  priceInSol: number = 0, // to be spentâœ…
  oneSolWorth: number = 0, //âœ…
  myBalance: string, // âœ…
  myBalanceSol: string, //âœ…
  mySolInUsd: number = 0, //âœ…
  solPriceUsd: number = 0, //âœ…
  marketCap: number = 0, //âœ…
  totalSupply: string = "Unkownn" // âœ…
) => {
  const myTokenValueUsd = (
    Number(myBalance) * Number(priceInUsd)
  ).toLocaleString();
  const requiredSolForOneToken = (1 / Number(priceInSol)).toExponential(3);
  const priceImpactWarning =
    Number(priceInSol) < 0.0001 ? "ðŸš¨ HIGH IMPACT" : "âœ… Low Impact";

  const truncate = (address: string) =>
    `${address.slice(0, 4)}...${address.slice(-4)}`;
  const scientificToHuman = (value: string) =>
    Number(value) < 0.001
      ? Number(value).toExponential(2)
      : Number(value).toFixed(4);

  return escapeMarkdownV2(`
      ðŸ“ˆ *${name} (${symbol})ðŸ“‰*
      ðŸ”— *Token Info*
      â”‚ Address: ${truncate(tokenAddress)}
      â”‚ LP Pair: ${truncate(lPPairAddress)}
      â”‚ DEX: \`${dex}\`
      
      ðŸ’¸ *Pricing* (1 SOL = ${oneSolWorth} ${symbol}\\)
      â”‚ Token Price: \\$${priceInUsd.toFixed(2)} | â—Ž${scientificToHuman(
    priceInSol.toString()
  )}
      â”‚ SOL Price: $${Number(solPriceUsd).toFixed(2)}
      â”‚ ${priceImpactWarning} \\(1 ${symbol} = â—Ž${requiredSolForOneToken} SOL)
      
      ðŸ’° *Wallet Balance*
      â”‚ ${symbol}: ${Number(myBalance).toLocaleString()} (~$${myTokenValueUsd})
      
      ðŸ“Š *Market Data*
      â”‚ FDV: \\$${Number(marketCap).toLocaleString()}
      â”‚ Pool Fees: 0.25%
      
      ðŸ’¡ *Pro Tips*
      1. Always verify contract renounced status
      2. Check 24h volume (>$10k recommended)
      3. Confirm LP lock duration
      4. New token? Assume *HIGH* risk!
      `);
};
function escapeMarkdownV2(text: string): string {
  // List of all special characters that need escaping in MarkdownV2
  const specialChars = [
    "_",
    "[",
    "]",
    "(",
    ")",
    "~",
    "`",
    ">",
    "#",
    "+",
    "-",
    "=",
    "|",
    "{",
    "}",
    ".",
    "!",
    "\\",
  ];

  // Create regex pattern dynamically to avoid escaping issues
  const pattern = new RegExp(
    `([${specialChars.map((c) => `\\${c}`).join("")}])`,
    "g"
  );

  return text.replace(pattern, "\\$1");
}
